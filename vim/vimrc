
set nocompatible              " be iMproved, required
filetype off                  " required

" to install Vundle.vim (and for the vundle stuff below to work), run:
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Bundle 'tobyS/pdv'
Plugin 'tobyS/vmustache'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'scrooloose/nerdtree'
Plugin '2072/PHP-Indenting-for-VIm'
Plugin 'tpope/vim-fugitive'
Bundle 'captbaritone/better-indent-support-for-php-with-html'
"Bundle 'joonty/vim-phpqa.git'
"     Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" For PHP Documenter (pdv)
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>

" For ultisnips plugin
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" For NERDTree  (to startup automatically when no files are selected)
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" to open NERDTree with CTRL-N
map <C-n> :NERDTreeToggle<CR>
" Auto close nerdtree if it's the only thing open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeShowHidden=1

" show open buffers and lets you select one
:nnoremap <F5> :buffers<CR>:buffer<Space>


" Allows you to have multiple buffers open
set hidden
" Lines of code will not wrap to the next line
"set nowrap
" Make backspace behave like other editors
set backspace=indent,eol,start
" Show line numbers.
set number

"colorscheme wallaby
"colorscheme ir_black
colorscheme wombat256mod
" Automatically indent on new lines
" set autoindent
" Copy the indentation of the previous line if auto indent doesn't know what to do
set copyindent
" Indenting a line with >> or << will indent or un-indent by 4
set shiftwidth=4
" Pressing tab in insert mode will use 4 spaces
set softtabstop=4
" Use spaces instead of tabs
set expandtab
" Highlight matching braces/tags
set showmatch
" Ignore case when searching
set ignorecase
" ...unless there's a capital letter in the query
set smartcase
" Indent to correct location with tab
set smarttab
" Highlight search matches
set hlsearch
" Search while you enter the query, not after
set incsearch
" More undos
set undolevels=1000
" Vim can set the title of the terminal window
set title
" Use a visual indicator instead of a beep
set visualbell
" Or just turn error bells off with this
set noerrorbells

set history=1000
set autoread
set mouse=a
set lbr
set si
syn sync fromstart
" Enable syntax highlighting
syntax enable
" Tell vim that your terminal supports 256 colors
set t_Co=256
" So you can paste without autotabs. F2 to toggle on and off
set pastetoggle=<F2>

"turns on the background for the current line
set cursorline


" Use ; instead of : to enter commands, saves a lot of keystrokes in the long run
nnoremap ; :

" Set the 99'th column to a color if the line is too long.
highlight ColorColumn ctermbg=DarkGray
call matchadd('ColorColumn', '\%99v', 100)


filetype plugin on
au FileType php set omnifunc=phpcomplete#CompletePHP


"Remap ctrl-x ctrl-o TO:  ctrl-<space>  To match eclipse/visual-studio
inoremap <C-@> <C-x><C-o>
"inoremap <C-@> <C-Space>
"  also could use: inoremap <C-space> <C-x><C-o> and then do inoremap <C-@> <c-space>
"  Depends on GUI or not.

map ff ggVG=  " re-indent the entire file.


" This rewires n and N to do the highlighing...
nnoremap <silent> n   n:call HLNext(0.4)<cr>
nnoremap <silent> N   N:call HLNext(0.4)<cr>
function! HLNext (blinktime)
        highlight WhiteOnRed ctermfg=white ctermbg=red
        let [bufnum, lnum, col, off] = getpos('.')
        let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
        let target_pat = '\c\%#\%('.@/.'\)'
        let ring = matchadd('WhiteOnRed', target_pat, 101)
        redraw
        exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
        call matchdelete(ring)
        redraw
endfunction
