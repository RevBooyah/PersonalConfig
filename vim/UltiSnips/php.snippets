global !p

def namespace(snip, path):
    import os
    namespace = pathToNamespace(path)
    if (len(namespace) == 0):
        return ''
    return os.linesep + snip.mkline('namespace ' + namespace + ';') + os.linesep

def pathToNamespace(path):
    import re
    path = path.replace('\\', '/')

    parts = []
    for part in path.split('/'):
        if re.match('^[A-Z]', part):
            parts.append(part)
        else:
            parts = []
    parts.pop()

    return '\\'.join(parts)

endglobal

snippet class "Class file" !
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename`
{
	${0}
}
endsnippet

snippet test "PHPUnit Test Case"
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename` extends \PHPUnit_Framework_TestCase
{
    ${0}
}
endsnippet

snippet iface "Interface file" !
<?php
`!p snip.rv = namespace(snip, path)`
interface `!p snip.rv = snip.basename`
{
	${0}
}
endsnippet

snippet trait "Trait file" !
<?php
`!p snip.rv = namespace(snip, path)`
trait `!p snip.rv = snip.basename`
{
	${0}
}
endsnippet

snippet fun "Method"
${1:public} function ${2:name}(${3})
{
	${0}
}
endsnippet

snippet con "Constructor"
public function __construct(${1})
{
	${0}
}
endsnippet
snippet getter "PHP Class Getter" !b
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;$2
}
$4
endsnippet

snippet setter "PHP Class Setter" !b
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3

    ${4:return $this;}
}
$0
endsnippet

snippet sg "PHP Class Setter Getter" !b
/**
 * @param ${2:mixed} $$1
 *
 * @return $this
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;

    ${4:return $this;}
}

/**
 * @return $2
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}
endsnippet

snippet ifun "method implementation"
/**
 * {@inheritDoc}
 */
${1:public} function ${2:name}(${3})
{
	${0}
}
endsnippet

snippet ofun "method override"
/**
 * {@inheritDoc}
 */
${1:public} function ${2:name}(${3})
{
	${4:parent::$2(${3});}
	${0}
}
endsnippet

snippet cpr "Class property"
/**
 * @var $3
 */
${1:private} $$2;$4
endsnippet
